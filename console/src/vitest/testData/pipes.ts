const samplePipeData = {
  nodes: [
    {
      type: 'dataNode',
      id: 'node_1hdvua4h600c0b44f40afab',
      data: {
        destination: true,
        display_name: 'Sqlite Physical Replication Movie',
        id: 'Sqlite Physical Replication Movie sqlite_physical_replication',
        journal_path: '/tmp/something.sqlite.mycelial_src',
        label: 'sqlite_physical_replication_source node',
        source: true,
        type: 'sqlite_physical_replication',
        name: 'sqlite_physical_replication',
      },
      key: 'node_1hdvua4h600c0b44f40afab',
      targetPosition: 'left',
      sourcePosition: 'right',
    },
    {
      type: 'dataNode',
      id: 'node_1hdvua4h60656ed2604f945',
      data: {
        destination: true,
        display_name: 'Hello World Dest',
        label: 'Hello World Dest node',
        type: 'hello_world',
        name: 'hello_world',
      },
      key: 'node_1hdvua4h60656ed2604f945',
      targetPosition: 'left',
      sourcePosition: '',
    },
    {
      type: 'dataNode',
      id: 'node_1hdvua4h601de92ed0e80d1',
      data: {
        display_name: 'Sqlite Source',
        id: 'Sqlite Source sqlite_connector',
        label: 'Sqlite Source node',
        path: 'test.sqlite',
        source: true,
        type: 'sqlite_connector',
        name: 'sqlite_connector',
      },
      key: 'node_1hdvua4h601de92ed0e80d1',
      targetPosition: '',
      sourcePosition: 'right',
    },
    {
      type: 'dataNode',
      id: 'node_1hdvua4h609ff5925aaecd6',
      data: {
        client: 'dev',
        display_name: 'Hello World Src',
        interval_milis: 5000,
        label: 'hello_world_source node',
        message: 'Hello!',
        name: 'hello_world_source',
        type: 'hello_world',
        source: true,
      },
      key: 'node_1hdvua4h609ff5925aaecd6',
      targetPosition: '',
      sourcePosition: 'right',
    },
    {
      type: 'dataNode',
      id: 'node_1hdvua4h604932fa050544f',
      data: {
        destination: true,
        display_name: 'Mycelial Server',
        endpoint: 'http://localhost:8080/ingestion',
        label: 'mycelial_server node',
        name: 'mycelial_server_destination',
        token: 'token',
        topic: '1hdonqgbl004c3f8af62176',
        type: 'mycelial_server',
      },
      key: 'node_1hdvua4h604932fa050544f',
      targetPosition: 'left',
      sourcePosition: '',
    },
  ],
  edges: [
    {
      type: 'smoothstep',
      animated: true,
      id: 'node_1hdvua4h605942761a8d9b5',
      data: { id: 28 },
      style: { stroke: 'green' },
      markerEnd: { type: 'arrowclosed', width: 20, height: 20, color: 'green' },
      target: 'node_1hdvua4h60656ed2604f945',
      source: 'node_1hdvua4h600c0b44f40afab',
    },
    {
      type: 'smoothstep',
      animated: true,
      id: 'node_1hdvua4h6010f3c0f32cc59',
      data: { id: 28 },
      style: { stroke: 'green' },
      markerEnd: { type: 'arrowclosed', width: 20, height: 20, color: 'green' },
      target: 'node_1hdvua4h600c0b44f40afab',
      source: 'node_1hdvua4h601de92ed0e80d1',
    },
    {
      type: 'smoothstep',
      animated: true,
      id: 'node_1hdvua4h60af4b8344a2d7d',
      data: { id: 28 },
      style: { stroke: 'green' },
      markerEnd: { type: 'arrowclosed', width: 20, height: 20, color: 'green' },
      target: 'node_1hdvua4h60656ed2604f945',
      source: 'node_1hdvua4h609ff5925aaecd6',
    },
    {
      type: 'smoothstep',
      animated: true,
      id: 'node_1hdvua4h60d445efc9f7cd5',
      data: { id: 28 },
      style: { stroke: 'green' },
      markerEnd: { type: 'arrowclosed', width: 20, height: 20, color: 'green' },
      target: 'node_1hdvua4h604932fa050544f',
      source: 'node_1hdvua4h609ff5925aaecd6',
    },
    {
      type: 'smoothstep',
      animated: true,
      id: 'node_1hdvua4h6047efd9b53105a',
      data: { id: 28 },
      style: { stroke: 'green' },
      markerEnd: { type: 'arrowclosed', width: 20, height: 20, color: 'green' },
      target: 'node_1hdvua4h60656ed2604f945',
      source: 'node_1hdvua4h601de92ed0e80d1',
    },
  ],
};

const samplePipeResponse = {
  data: {
    configs: [
      {
        id: 23,
        pipe: [
          {
            destination: '',
            display_name: 'Sqlite Physical Replication Movie',
            id: 'Sqlite Physical Replication Movie sqlite_physical_replication',
            journal_path: '/tmp/something.sqlite.mycelial_src',
            label: 'sqlite_physical_replication_source node',
            source: true,
            type: 'sqlite_physical_replication',
            name: 'sqlite_physical_replication',
          },
          {
            destination: true,
            display_name: 'Hello World Dest',
            label: 'Hello World Dest node',
            type: 'hello_world',
            name: 'hello_world',
          },
        ],
      },
      {
        id: 24,
        pipe: [
          {
            display_name: 'Sqlite Source',
            id: 'Sqlite Source sqlite_connector',
            label: 'Sqlite Source node',
            path: 'test.sqlite',
            source: true,
            type: 'sqlite_connector',
            name: 'sqlite_connector',
          },
          {
            destination: true,
            display_name: 'Sqlite Physical Replication Movie',
            id: 'Sqlite Physical Replication Movie sqlite_physical_replication',
            journal_path: '/tmp/something.sqlite.mycelial_src',
            label: 'sqlite_physical_replication_destination node',
            source: true,
            type: 'sqlite_physical_replication',
            name: 'sqlite_physical_replication',
          },
        ],
      },
      {
        id: 26,
        pipe: [
          {
            client: 'dev',
            display_name: 'Hello World Src',
            interval_milis: 5000,
            label: 'hello_world_source node',
            message: 'Hello!',
            type: 'hello_world',
            name: 'hello_world',
          },
          {
            client: 'dev',
            display_name: 'Hello World Dest',
            label: 'hello_world_destination node',
            type: 'hello_world',
            name: 'hello_world',
          },
        ],
      },
      {
        id: 27,
        pipe: [
          {
            client: 'dev',
            display_name: 'Hello World Src',
            interval_milis: 5000,
            label: 'hello_world_source node',
            message: 'Hello!',
            name: 'hello_world_source',
            source: true,
            type: 'hello_world',
          },
          {
            destination: true,
            display_name: 'Mycelial Server',
            endpoint: 'http://localhost:8080/ingestion',
            label: 'mycelial_server node',
            name: 'mycelial_server_destination',
            token: 'token',
            topic: '1hdonqgbl004c3f8af62176',
            type: 'mycelial_server',
          },
        ],
      },
      {
        id: 28,
        pipe: [
          {
            display_name: 'Sqlite Source',
            id: 'Sqlite Source sqlite_connector',
            path: 'test.sqlite',
            source: true,
            type: 'sqlite_connector',
            name: 'sqlite_connector',
          },
          {
            destination: true,
            display_name: 'Hello World Dest',
            type: 'hello_world',
            name: 'hello_world',
          },
        ],
      },
    ],
  },
};

const samplePipeRequestBody = {
  token: 'token',
  configs: [
    {
      id: 0,
      pipe: [
        {
          name: 'sqlite_physical_replication_source',
          label: 'sqlite_physical_replication_source node',
          client: '{client name}',
          type: 'sqlite_physical_replication',
          name: 'sqlite_physical_replication',
          display_name: '{display name}',
          journal_path: '{path and filename of source journal',
        },
        {
          name: 'mycelial_server_destination',
          label: 'mycelial_server node',
          type: 'mycelial_server',
          name: 'mycelial_server',
          display_name: 'Mycelial Server',
          endpoint: 'http://{host or ip}:8080/ingestion',
          token: '{security token}',
        },
      ],
    },
    {
      id: 0,
      pipe: [
        {
          name: 'mycelial_server_source',
          label: 'mycelial_server node',
          type: 'mycelial_server',
          display_name: 'Mycelial Server',
          endpoint: 'http://{host or ip}:8080/ingestion',
          token: 'token',
          name: 'mycelial_server',
        },
        {
          name: 'sqlite_physical_replication_destination',
          label: 'sqlite_physical_replication_destination node',
          client: 'dev',
          type: 'sqlite_physical_replication',
          name: 'sqlite_physical_replication',
          display_name: '{display name}',
          journal_path: '{path and filename of destination journal}',
          database_path: '{path and filename of destination database',
        },
      ],
    },
  ],
};

const mockPostData = {
  id: 0,
  sourceNodeData: {
    name: 'sqlite_physical_replication_source',
    label: 'sqlite_physical_replication_source node',
    client: '{client name}',
    type: 'sqlite_physical_replication',
    display_name: '{display name}',
    name: 'sqlite_physical_replication',
    journal_path: '{path and filename of source journal',
  },
  targetNodeData: {
    name: 'mycelial_server_destination',
    label: 'mycelial_server node',
    type: 'mycelial_server',
    display_name: 'Mycelial Server',
    name: 'mycelial_server',
    endpoint: 'http://{host or ip}:8080/ingestion',
    token: '{security token}',
  },
};

export {
  samplePipeData,
  samplePipeResponse,
  samplePipeRequestBody,
  mockPostData,
};
